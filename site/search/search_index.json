{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Paul's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Paul Yang</li> </ul>"},{"location":"tutorials/rust-setup/#lets-get-started","title":"Let's get started","text":"<p>Let's begin our Rust Journey, below are what we are going to discuss in this tutorial: - Introduction - Prerequisites - Setting Up Git Repository - Configuring the DevContainer - Verifying Rust Version - Creating your first project - Write your first program, \"Hello COMP423\" - Compiling and Running the Program - Testing and Sharing</p>"},{"location":"tutorials/rust-setup/#introduction","title":"Introduction","text":"<p>Rust is a general-purpose programming language emphasizing performance, type safety, and concurrency. It enforces memory safety, meaning that all references point to valid memory. It does so without a traditional garbage collector; instead, memory safety errors and data races are prevented by the \"borrow checker\", which tracks the object lifetime of references at compile time. -- wikipedia</p>"},{"location":"tutorials/rust-setup/#what-will-we-do-in-this-tutorial","title":"What will we do in this tutorial","text":"<ul> <li>Setting up a DevContainer for Rust.</li> <li>Writing a simple \"Hello COMP423\" program.</li> <li>Compiling and running the program.</li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Installed VSCode with the Remote - Containers plugin.</li> <li>Git installed locally and a GitHub account.</li> <li>Basic understanding of Git workflows and containerized development.</li> </ul>"},{"location":"tutorials/rust-setup/#setting-up-the-git-repository","title":"Setting Up the Git Repository","text":"<ul> <li>Explain how to:<ul> <li>Create a new Git repository: <code>Bash      git init</code></li> <li>Create a new directory structure: <code>Bash      mkdir -p docs/tutorials       cd docs/tutorials</code></li> <li>Add a <code>.gitignore</code> file for Rust: <code>Bash      echo \"target/\" &gt;&gt; .gitignore</code></li> </ul> </li> <li>What is <code>.gitignore</code>?<ul> <li>The <code>.gitignore</code> file tells Git which files or directories to ignore in version control. For Rust projects, ignoring the <code>target/</code> directory is essential because it contains compiled binaries and temporary files that are not necessary to track in your Git repository.</li> </ul> </li> <li>You can see more tutorials here .</li> </ul>"},{"location":"tutorials/rust-setup/#configuring-the-devcontainer","title":"Configuring the DevContainer","text":"<ul> <li>Explain how to configure the development container for Rust:<ol> <li>Create a <code>.devcontainer</code> folder: <code>Bash     mkdir .devcontainer     cd .devcontainer     touch devcontainer.json</code></li> <li>Write <code>devcontainer.json</code>:</li> </ol> </li> </ul> <pre><code>    {\n      \"name\": \"Rust DevContainer\",\n      \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n      \"customizations\": {\n        \"vscode\": {\n          \"extensions\": [\n            \"rust-lang.rust-analyzer\"\n          ]\n        }\n      }\n    }\n</code></pre> <ul> <li>Install Rust Analyzer on VScode\uff1a<ul> <li>This extension provides support for the\u00a0Rust programming language. It is recommended over and replaces\u00a0<code>rust-lang.rust</code>.</li> </ul> </li> </ul>"},{"location":"tutorials/rust-setup/#what-is-a-container","title":"What is a container","text":"<ul> <li>A standard package of software\u2014known as a container\u2014bundles an application\u2019s code together with the related configuration files and libraries, and with the dependencies required for the app to run. This allows developers and IT pros to deploy applications seamlessly across environments.</li> </ul>"},{"location":"tutorials/rust-setup/#how-to-start-a-devcontainer","title":"How to Start a DevContainer","text":"<p>When you open your project directory in VS Code, a prompt should appear asking if you want to reopen the folder in a DevContainer: - Click \"Reopen in Container\". If the prompt does not appear, you can manually start the DevContainer: 1. Open the command palette using Ctrl+Shift+P (Windows/Linux) or Cmd+Shift+P (Mac). 2. Search for and select \"Reopen in Container\". 3. VS Code will automatically pull the required Docker image and start the container.</p>"},{"location":"tutorials/rust-setup/#verifying-rust-version","title":"Verifying Rust Version","text":"<ul> <li>Run the following commands to check if Rust is installed properly:</li> </ul> <pre><code>    rustc --version \n    cargo --version\n</code></pre> <ul> <li>You should see:</li> </ul> <pre><code>    rustc 1.83.0 (90b35a623 2024-11-26)\n    cargo 1.83.0 (5ffbef321 2024-10-29)\n</code></pre>"},{"location":"tutorials/rust-setup/#creating-your-first-project","title":"Creating your first project","text":"<ul> <li><code>Cargo new</code></li> </ul> <pre><code>    cargo new hello_comp423 --vcs none\n    cd hello_comp423\n</code></pre> <ul> <li><code>cargo new</code>\u00a0creates a simple Hello World project with a\u00a0<code>main.rs</code>\u00a0source code file and\u00a0<code>Cargo.toml</code> Cargo manifest\u00a0file.</li> </ul> <pre><code>    src\\\n        main.rs\n    Cargo.toml\n</code></pre> <ul> <li><code>--vcs none</code>: preventsCargo from automatically creating a Git repository.</li> </ul>"},{"location":"tutorials/rust-setup/#write-your-first-program-hello-comp423","title":"Write your first program, \"Hello COMP423\"","text":"<ul> <li>Open the file /hello_comp423/src/main.rs</li> </ul> <pre><code>    fn main() {\n        println!(\"Hello COMP423!\");\n    }\n</code></pre>"},{"location":"tutorials/rust-setup/#compiling-and-running-the-program","title":"Compiling and Running the Program","text":"<ul> <li><code>cargo run</code>: Run a binary or example of the local package.<ul> <li><code></code>Bash $cargo run Finished <code>dev</code> profile [unoptimized + debuginfo] target(s) in 0.01s Running <code>target/debug/hello_comp423</code> Hello COMP423! ```</li> </ul> </li> <li><code>cargo build</code>: Compile local packages and all of their dependencies.<ul> <li><code>Bash $cargo build Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.06s</code></li> </ul> </li> </ul>"},{"location":"tutorials/rust-setup/#testing-and-sharing","title":"Testing and Sharing","text":"<ul> <li>Push the repository to GitHub:<ul> <li>Add a <code>README.md</code>: <code>Markdown     # Hello COMP423 Rust Project Follow the tutorial here:</code></li> <li>Commit and push changes:</li> </ul> </li> </ul> <pre><code>        git add . \n        git commit -m \"Initial commit\" \n        git push origin main\n</code></pre>"},{"location":"tutorials/rust-setup/#reference","title":"Reference","text":"<ul> <li>Rust (programming language)</li> <li>Rust \u7a0b\u5f0f\u8a2d\u8a08\u8a9e\u8a00</li> <li>The Rust Programming Language</li> <li>Rust Development Container Images</li> <li>Rust in Visual Studio Code</li> <li>What is a container</li> <li>What files in a Cargo project should be in my .gitignore?</li> </ul>"}]}